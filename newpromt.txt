Техническое задание: Разработка защищенного чат-приложения
1. Обзор проекта
Требуется разработать безопасное чат-приложение, которое будет поддерживать текстовые сообщения, аудио/видео звонки и иметь административную панель. Приложение должно обеспечивать конфиденциальность и безопасность обмена данными.
2. Сетевая топология
2.1. Основные компоненты инфраструктуры

Reverse-proxy сервер: IP 82.202.136.185
Основной сервер: Orange Pi 5 Max с белым IP 95.30.251.97
Маршрутизатор: MikroTik (выполняет NAT и проброс портов)
Docker-сеть: opt_dmz_network (10.16.52.x/24) - обязательно использовать только эту сеть

2.2. Схема взаимодействия
Клиент → Reverse-proxy (82.202.136.185) → MikroTik (95.30.251.97) → Docker контейнеры (10.16.52.x/24)
2.3. Проброс портов на MikroTik (примеры правил)

Flags: X - disabled, I - invalid; D - dynamic 
 0    chain=srcnat action=src-nat to-addresses=10.15.81.6 out-interface=LV_GRE log=no log-prefix="" 

 1    ;;; Traffic to WAN 
      chain=srcnat action=src-nat to-addresses=95.30.251.97 out-interface=ether1 log=no log-prefix="" 

 2    ;;; DNS Redirect
      chain=dstnat action=redirect protocol=udp in-interface-list=!WAN dst-port=53 log=no log-prefix="" 

 3    chain=dstnat action=dst-nat to-addresses=10.16.52.1 to-ports=80 protocol=tcp src-address=82.202.136.185 dst-port=55080 log=no log-prefix="" 

 4    chain=dstnat action=dst-nat to-addresses=10.16.52.1 to-ports=180 protocol=tcp src-address=82.202.136.185 dst-port=55180 log=no log-prefix="" 

 5    chain=dstnat action=dst-nat to-addresses=10.16.52.11 to-ports=8065 protocol=tcp src-address=82.202.136.185 dst-port=55280 log=no log-prefix="" 

 6    chain=dstnat action=dst-nat to-addresses=10.16.52.15 to-ports=9095 protocol=tcp src-address=82.202.136.185 dst-port=55580 log=no log-prefix="" 

 7    chain=dstnat action=dst-nat to-addresses=10.16.52.15 to-ports=9091 protocol=tcp src-address=82.202.136.185 dst-port=55583 log=no log-prefix="" 

 8    chain=dstnat action=dst-nat to-addresses=10.16.52.16 to-ports=8081 protocol=tcp src-address=82.202.136.185 dst-port=55581 log=no log-prefix="" 

 9    chain=dstnat action=dst-nat to-addresses=10.16.52.15 to-ports=7880 protocol=tcp src-address=82.202.136.185 dst-port=7880 log=no log-prefix="" 

10    chain=dstnat action=dst-nat to-addresses=10.16.52.15 to-ports=7881 protocol=tcp src-address=82.202.136.185 dst-port=7881 log=no log-prefix="" 

11    chain=dstnat action=dst-nat to-addresses=10.16.52.15 to-ports=7881 protocol=udp src-address=82.202.136.185 dst-port=7881 log=no log-prefix="" 

12    chain=dstnat action=dst-nat to-addresses=10.16.52.15 to-ports=50000-60000 protocol=udp src-address=82.202.136.185 dst-port=50000-60000 log=no 
      log-prefix="" 

13    chain=dstnat action=dst-nat to-addresses=10.16.52.1 protocol=tcp in-interface=ether1 dst-port=443,80 log=no log-prefix=""

3. Компоненты системы
3.1. Серверная часть (Go)

WebSocket API: для обмена сообщениями в реальном времени
HTTP API: для аутентификации и других операций
Шифрование данных: шифрование на стороне сервера (SSE) плюс TLS
База данных: PostgreSQL для хранения пользователей, сообщений и других данных
Кэширование: Redis для масштабирования WebSocket

3.2. Клиентская часть

Веб-клиент: React-приложение
Безопасность: Использование HTTPS/WSS для защиты трафика

3.3. Звонки (WebRTC)

SFU сервер: LiveKit для поддержки аудио/видео звонков
DTLS-SRTP: Шифрование медиа-потоков

3.4. Прокси и балансировка

Nginx: Reverse proxy для всех запросов, терминация SSL

4. Модель безопасности
4.1. Транспортная безопасность (TLS)

Весь HTTP и WebSocket трафик шифруется с использованием HTTPS и WSS
Для медиа-потоков используется DTLS-SRTP (встроенное в WebRTC)

4.2. Шифрование на стороне сервера (SSE)

Все данные шифруются перед сохранением в базу данных
Ключи шифрования хранятся в переменных окружения Docker
Используется AES-GCM для шифрования сообщений и файлов

5. Структура Docker-контейнеров
yamlservices:
  server:
    # Go-сервер API и WebSocket
    networks:
      dmz_network:
        ipv4_address: 10.16.52.15
    ports:
      - "${SERVER_PORT:-9095}:9095"
      - "9091:9091"  # WebSocket порт
    
  client:
    # React веб-клиент
    networks:
      dmz_network:
        ipv4_address: 10.16.52.16
    
  db:
    # PostgreSQL база данных
    networks:
      dmz_network:
        ipv4_address: 10.16.52.17
    
  redis:
    # Redis для WebSocket масштабирования
    networks:
      dmz_network:
        ipv4_address: 10.16.52.18

networks:
  dmz_network:
    external: true
    name: opt_dmz_network
6. Функциональные требования
6.1. Общие требования

Поддержка текстового чата, аудио и видео звонков
Закрытая регистрация (аккаунты создаются только администратором)
Административная панель для управления пользователями
Групповые звонки с участием до 5 пользователей
Обмен файлами и эмодзи

6.2. Серверная часть

WebSocket API для обмена сообщениями
HTTP/HTTPS API для аутентификации
Интеграция с SFU (LiveKit) для звонков
Модель безопасности на основе TLS + SSE

6.3. Веб-клиент (React)

Интерфейс для чата и звонков
Список контактов/чатов
Окно сообщений и звонков
Адаптивный дизайн

7. Пошаговая разработка
7.1. Подготовка окружения

Настройка Docker на Orange Pi 5 Max
Создание Docker-сети opt_dmz_network (если еще не создана)
Настройка Nginx для проксирования запросов
Настройка SSL-сертификатов через Let's Encrypt

7.2. Разработка сервера

Создание основного Go-приложения
Настройка базы данных PostgreSQL
Интеграция Redis для WebSocket масштабирования
Реализация API для регистрации и входа
Реализация WebSocket для обмена сообщениями
Интеграция с LiveKit для звонков

7.3. Разработка клиента

Создание React-приложения
Реализация UI компонентов
Интеграция с сервером через API и WebSocket
Реализация WebRTC для звонков

7.4. Развертывание

Сборка Docker-образов
Настройка docker-compose.yml
Настройка MikroTik для проброса портов
Настройка Nginx для проксирования
Запуск и тестирование

8. Конфигурация Nginx (пример)
nginx# Чат сервер
server {
    listen 443 ssl;
    server_name chat.kikita.ru;
    
    ssl_certificate /etc/letsencrypt/live/chat.kikita.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/chat.kikita.ru/privkey.pem;
    
    # WebSocket
    location /api/ws {
        proxy_pass http://95.30.251.97:55583;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # API
    location /api/ {
        proxy_pass http://95.30.251.97:55580;
        proxy_http_version 1.1;
    }
    
    # LiveKit для звонков
    location /livekit {
        proxy_pass http://95.30.251.97:7880;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Веб-клиент
    location / {
        proxy_pass http://95.30.251.97:55581;
        proxy_http_version 1.1;
    }
}
9. Переменные окружения для Docker
SERVER_PORT=9095
DB_USER=postgres
DB_PASSWORD=postgres12345!
DB_NAME=messenger
JWT_SECRET=gp2Ju8PPFTvLA4WRbDDNF5jUQ2sX7KcP
LIVEKIT_API_KEY=devkey
LIVEKIT_API_SECRET=devsecret123
SSE_KEY_BASE64=M3pjL1YwdURHbVgrQkRFdlhMRDZ1VzhxT1FFUG1WdmV0THRnZU8yYUhMWT0=
10. Тестирование

Функциональное тестирование: регистрация, вход, обмен сообщениями, звонки
Стресс-тестирование: высокая нагрузка, много пользователей
Тестирование безопасности: проверка шифрования, защита от атак

11. Документация

Документация по API
Руководство по развертыванию
Руководство администратора
Руководство пользователя

Это техническое задание учитывает особенности сетевой инфраструктуры и обеспечивает разработку защищенного чат-приложения с помощью комбинации TLS и серверного шифрования вместо E2EE.